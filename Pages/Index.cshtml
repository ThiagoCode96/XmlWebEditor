@page
@using Newtonsoft.Json;
@using System.Xml;
@model IndexModel


@{
    ViewData["Title"] = "Xml/JsonEditor";
    string document ="";
    XmlDocument docx = new XmlDocument();//docx para o jstree
    if (Model.text1.StartsWith("<"))
    {
        document = "xml";
       if (Model.text2==null)
        docx.LoadXml(Model.text1);
       else
        docx.LoadXml(Model.text2);
    }
    else if (Model.text1.StartsWith("{") || Model.text1.StartsWith("["))
    {
       
        document = "json";

    }

    
    
        
}


<div id="text-center">
    <h1 class="display-4">Xml Editor</h1>
</div>
<div id="xml-center">
    @if (Model.IsResponse)
    {
        if (Model.IsSuccess)
        {
            <div class="alert alert-success">
                @Model.message
            </div>
        }
        else
        {
            <div class="alert alert-danger">
                @Model.message
            </div>
        }
    }
    <div id="xml-button-top">
        <form asp-page-handler="xmlTextStart" method="post" enctype="multipart/form-data">
            <button class="btn btn-default"> novo XML </button>
        </form>
        <form asp-page-handler="jsonTextStart" method="post" enctype="multipart/form-data">
            <button class="btn btn-default"> novo Json </button>
        </form>
        @*
            verifica se é XmL ou Json antes de salvar para não ocorrer problemas
        *@
        @if (document=="xml")
        {

            <a class="btn btn-default" asp-page-handler="xmlFile">salvar </a>
        }
        else if (document=="json")
        {
           <a class="btn btn-default" asp-page-handler="jsonFile"> salvar </a>
            
        }

    </div>
    <div id="xml-archives">
        <form asp-page-handler="xmlSetFile" method="post" enctype="multipart/form-data">
            <input type="file" class="form-control" id="fileInput" asp-for="Upload" />

            <button class="btn btn-default" type="submit"  onclick="return checkFileInput()"> abrir </button>
        </form>
        @*
            script para o usuário não enviar arquivos nulos
        *@
        <script>
            function checkFileInput() {
                let fileInput = document.getElementById("fileInput");
                if (!fileInput.value) {
                    alert("Por favor adicione um arquivo Xml ou Json");
                    return false;
                }
                return true;
            }
        </script>
    </div>
    <div id="xml-textarea">
        <div>
            <form asp-page-handler="textController" method="post">
                <div>
                    
                    <p>text</p>
                    <button  type="submit">atualizar</button>
                </div>
                @*fim demonstrando line number*@
                 <textarea class="xml-text"  typeof="text" name="text" rows="12" cols="80">@Model.text1</textarea>
                
            </form>
        </div>
       <div>
            @*"*@
            <form asp-page-handler="jstreeToData" method="post">
                <div>
                    <p>nodes</p>
                    
                    <button class="btn btn-default" type="submit" onclick="return updateJson()" >atualizar</button>
                    @*
                    script para o usuário ver o arquivo json
                    *@
                    <script>
                        function updateJson() {
                            var tree = $('#nodos').jstree(true).get_json('#', { flat: false });
                            // Convert the result to a JSON string
                            document.getElementById("jstreeData").value=JSON.stringify(tree);
                            
                        }
                    </script>
                    <input id="jstreeData" name="jstreeData" type="hidden" value="{}" runat="server" />
                </div>
                @*
                    textarea antigo
                <textarea class="xml-text" name="xml2" rows="12" cols="80" readonly>@Model.text2</textarea>
                *@            
            </form>
            <div id="nodos"></div>
       </div>
    </div>

    <script>
        $(document).ready(function () 
        {
            var treedoc;
            if ("@document" == "json") {
                treedoc= JSON.parse(@Html.Raw(Json.Serialize(Model.text1))) 
            }
            else if ("@document" == "xml")
                treedoc= JSON.parse(@Html.Raw(Json.Serialize(JsonConvert.SerializeXmlNode(docx))))
                

            $('#nodos').jstree // @*segura isto: @Html.Raw(Model.getFile().Replace(@"\", "/"))"*@
                ({
                   
                    "core": {
                        "animation": 0,
                        "check_callback": true,
                        "themes": {
                            "variant": "large", "stripes": true
                        },
                        'check_callback': true,
                        data: jsonToJsTreeObject(treedoc)
                    },
                    "plugins": ["contextmenu", "dnd", "search",
                        "state", "types", "wholerow"],
                    "root": {
                        "valid_children": ["default"]
                    }
                    
                })

            ///TESTE DE JAVASCRIPT
            //var tree = $('#nodos').jstree().get_json( node, li_attr, a_attr );
            ///FIM TESTE DE JAVASCRIPT
        }
        );
        //JSTREE PARA JS
        //Função criada por mustafakadwa52 na URL: https://github.com/vakata/jstree/issues/2405
        //SIM! FUNCIONOU!
        function jsonToJsTreeObject(json_data_object, final_array = new Array()) {
            Object.keys(json_data_object).forEach(function (data) {
                // console.log("Key:" + data);
                if (Array.isArray(json_data_object[data]) || json_data_object[data] instanceof Object) {
                    final_array.push({ text: `${data}`, children: jsonToJsTreeObject(json_data_object[data], new Array()) });
                    // using state attribute
                    // final_array.push( { text: `${data}`, state : {  'opened' : false, 'selected' : false }, children: jsonToJsTreeObject( json_data_object[data], new Array() ) } );
                }
                else {
                    final_array.push({ text: `${data}`, children: [{ text: `${json_data_object[data]}` }] });
                    // using state attribute
                    // final_array.push( { text: `${data}`, state : {  'opened' : false, 'selected' : false }, children: [{ text: `${json_data_object[data]}` }] } );
                }
            });

            return final_array;
        }

    </script>
</div>